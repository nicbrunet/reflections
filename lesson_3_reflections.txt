3.1 When would you want to create a remote repository rather than keeping all your work local?

Creating a remote repository alls access to it by other people, say for a collaborative project.
Additionally, a remote repository serves as a cloud-stored backup of your local files.

3.2 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You would want to manually pull changes from GitHub because there could be someone working remotely on the files and you wouldn't want to pull incomplete files.
Also, you may not want to pull every branch and instead specify on one particular branch you want to work on from GitHub, so pulling all of them is inefficient.
Overall allowing Git to decide when and what to pull would be much less efficient than manually deciding what to pull and when.

3.3 Describe the differences between forks, clones, and branches. When would you use one instead of another?

Clones create a copy of an entire repository and its commit history onto a local computer from somewhere else (i.e., online).
Forks are the same as clones in that it copies all the files as well and the entire commit history, but it's only does this on the GitHub website between two user accounts.
Branches don't really create a copy of anything, instead they "branch" off another commit branch for the purpose of not messing with the original commit branch's code.
Branches are created to track down bugs, create new features, allow one person to work on a small part of a larger code file, and then all these things can then be merged back in with the original code once it's working to everyone's satisfaction.

3.4 What is the benefit of having a copy of the last known state of the remote stored locally?

It's always good to have the most recent copy of the full repository locally, because it allows you to do work offline and then just sync up once you're back online.
This makes working more efficient, because you don't have to constantly be syncing up between GitHub and local. You can just merge them when it's convenient to do so.

3.5 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaborating without using Git or GitHub would definitely be harder unless only one person worked on a file at a time.
Once several people start working on the same set of files it quickly becomes very difficult and time consuming to figure out what the most recent versions of each file should look like.
There would be manual checking, time stamp verification, and manual merging of files.
It would crazy.

3.6 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Any time you're experimenting or making changes that should be approved by someone else before being merged into the working whole master, then you should work on a separate branch.
That way you can use pull requests to collaborate and get feedback before changing your perfectly working master branch.

